ЗАДАНИЯ КВЕСТА "ОХОТНИКИ ЗА РЕКОРДАМИ"

=== Задание 1: Создание исследовательской базы ===
Ваша роль: Вы — исследователь технологических рекордов, которому поручено создать базу для изучения удивительных достижений в мире IT.

Что нужно сделать:
1. Создайте папку с названием record_hunt — это будет ваша исследовательская база.
2. Перейдите в эту папку.
3. Создайте внутри четыре подпапки:
   - equipment — для инструментов исследования
   - database — для систематизации данных
   - records — для хранения найденных записей
   - reports — для аналитических отчетов
4. Проверьте, что структура создана правильно.
5. Вернитесь в основную папку квеста.
6. Запустите проверку: ./quest_checker.sh 1

Подсказка: Используйте команды mkdir, cd, ls -la.

=== Задание 2: Поиск технологических рекордов ===
Ваша миссия: В системе спрятаны файлы с данными о трех выдающихся технологических рекордах. Найдите их!

Что нужно сделать:
1. Найдите все файлы с расширением .data в системе.
2. Проверьте три основные локации: /tmp/, /var/tmp/ и /secret/.
3. Скопируйте каждый найденный файл в папку record_hunt/records/.
4. Проверьте, что все файлы успешно скопированы.
5. Запустите проверку: ./quest_checker.sh 2

Подсказка: Команда find поможет найти файлы по шаблону, а cp — скопировать их.

=== Задание 3: Извлечение секретных кодов ===
Детективная работа: Каждая запись о рекорде содержит секретный код доступа. Найдите их все!

Что нужно сделать:
1. Прочитайте содержимое каждого файла .data в папке records.
2. Найдите в каждом файле строку "Код доступа:" и запомните код.
3. Создайте файл access_codes.txt в папке reports.
4. Запишите в него все найденные коды (каждый код на отдельной строке).
5. Проверьте содержимое созданного файла.
6. Запустите проверку: ./quest_checker.sh 3

Подсказка: cat покажет содержимое файла, echo с > и >> поможет записать данные.

=== Задание 4: Составление аналитического отчета ===
Научная работа: Профессиональные исследователи всегда документируют свои открытия.

Что нужно сделать:
1. Создайте файл record_analysis.txt в папке reports.
2. Напишите в него анализ каждого найденного рекорда:
   - Опишите рекорд марафона программирования.
   - Проанализируйте бюджет разработки GTA V.
   - Объясните значение рекорда скорости интернета.
3. Каждое описание должно содержать минимум одну строку.
4. Проверьте количество строк в файле.
5. Запустите проверку: ./quest_checker.sh 4

Подсказка: Используйте nano для удобного редактирования или echo для быстрой записи. Команда wc -l покажет количество строк.

=== Задание 5: Секретный архив ===
Финальное открытие: Существует один особый рекорд, который может вас вдохновить!

Что нужно сделать:
1. Найдите в папке /secret/archives/ файл с расширением .txt.
2. Прочитайте его содержимое — это самый вдохновляющий рекорд!
3. Скопируйте этот файл в папку record_hunt (в корень, не в подпапку).
4. Запустите финальную проверку: ./quest_checker.sh 5

Награда: Узнаете о рекорде самой молодой команды разработчиков и получите сертификат исследователя!

=== Теория: grep и конвейер (|) ===

Команда grep используется для поиска строк в файлах по заданному шаблону (регулярному выражению).

Основные флаги grep:
    -i   — игнорировать регистр букв при поиске (например, "Рекорд" и "рекорд" будут найдены одинаково)
    -o   — выводить только совпадающие фрагменты, а не всю строку
    -h   — не выводить имя файла перед найденной строкой (удобно при поиске в нескольких файлах)
    -E   — использовать расширенные регулярные выражения (например, для поиска по шаблону с +, {n,})
    -r   — искать рекурсивно во всех вложенных папках
    -v   — выводить только строки, которые НЕ соответствуют шаблону

Конвейер (|) — это оператор, который позволяет передать вывод одной команды на вход другой.
Например: команда1 | команда2

Примеры использования grep и конвейера:

1. Поиск всех строк с "код доступа" во всех .data-файлах:
    grep "Код доступа" *.data

2. Поиск без учёта регистра:
    grep -i "рекорд" *.data

3. Подсчёт количества файлов, где встречается слово "игра":
    grep -l "игра" *.data | wc -l

4. Вывод только самих кодов доступа (после двоеточия):
    grep "Код доступа" *.data | cut -d':' -f2

5. Поиск всех строк, не содержащих слово "рекорд":
    grep -v "рекорд" *.data

6. Рекурсивный поиск слова "бюджет" во всех файлах в папке:
    grep -r "бюджет" .

7. Использование расширенных регулярных выражений:
    grep -E "код|бюджет" *.data

8. Поиск и подсчёт количества уникальных слов "Рекорд" в файлах:
    grep -o "Рекорд" *.data | wc -l

9. Поиск строк с числом (цифрами) в файле:
    grep -E "[0-9]+" файл.txt

10. Поиск строк, где слово "игра" встречается в начале строки:
    grep "^игра" *.data

Примеры использования конвейеров (|):

1. Найти строки с "Код доступа" и вывести только коды:
    grep "Код доступа" *.data | cut -d':' -f2

2. Найти все строки с "рекорд", привести к нижнему регистру и отсортировать:
    grep "рекорд" *.data | tr '[:upper:]' '[:lower:]' | sort

3. Подсчитать количество уникальных слов "игра" во всех файлах:
    grep -o "игра" *.data | sort | uniq -c

4. Найти строки с числами и вывести только уникальные числа:
    grep -Eo "[0-9]+" *.data | sort -n | uniq

5. Найти строки с "бюджет", вывести только суммы (цифры):
    grep "бюджет" *.data | grep -Eo "[0-9]+"

6. Найти все строки с "код", отсортировать и убрать дубликаты:
    grep -i "код" *.data | sort | uniq

7. Найти строки с "игра", вывести только имена файлов:
    grep -l "игра" *.data | sort

8. Найти строки с "рекорд", посчитать количество таких строк:
    grep "рекорд" *.data | wc -l

Команды можно объединять с помощью | для последовательной обработки данных.


